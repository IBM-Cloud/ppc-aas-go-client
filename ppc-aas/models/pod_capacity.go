// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PodCapacity List of available resources within a Pod
//
// swagger:model PodCapacity
type PodCapacity struct {

	// pod data
	PodData *PodData `json:"PodData,omitempty"`

	// storage pools
	StoragePools []*StoragePoolCapacity `json:"StoragePools"`

	// List of available system pools within a Pod
	SystemPools map[string]SystemPool `json:"SystemPools,omitempty"`
}

// Validate validates this pod capacity
func (m *PodCapacity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePodData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoragePools(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemPools(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PodCapacity) validatePodData(formats strfmt.Registry) error {
	if swag.IsZero(m.PodData) { // not required
		return nil
	}

	if m.PodData != nil {
		if err := m.PodData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PodData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PodData")
			}
			return err
		}
	}

	return nil
}

func (m *PodCapacity) validateStoragePools(formats strfmt.Registry) error {
	if swag.IsZero(m.StoragePools) { // not required
		return nil
	}

	for i := 0; i < len(m.StoragePools); i++ {
		if swag.IsZero(m.StoragePools[i]) { // not required
			continue
		}

		if m.StoragePools[i] != nil {
			if err := m.StoragePools[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("StoragePools" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("StoragePools" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PodCapacity) validateSystemPools(formats strfmt.Registry) error {
	if swag.IsZero(m.SystemPools) { // not required
		return nil
	}

	for k := range m.SystemPools {

		if err := validate.Required("SystemPools"+"."+k, "body", m.SystemPools[k]); err != nil {
			return err
		}
		if val, ok := m.SystemPools[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SystemPools" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("SystemPools" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this pod capacity based on the context it is used
func (m *PodCapacity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePodData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStoragePools(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSystemPools(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PodCapacity) contextValidatePodData(ctx context.Context, formats strfmt.Registry) error {

	if m.PodData != nil {
		if err := m.PodData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PodData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PodData")
			}
			return err
		}
	}

	return nil
}

func (m *PodCapacity) contextValidateStoragePools(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StoragePools); i++ {

		if m.StoragePools[i] != nil {
			if err := m.StoragePools[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("StoragePools" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("StoragePools" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PodCapacity) contextValidateSystemPools(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.SystemPools {

		if val, ok := m.SystemPools[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PodCapacity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PodCapacity) UnmarshalBinary(b []byte) error {
	var res PodCapacity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
